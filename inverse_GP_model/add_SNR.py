# coding: utf-8

def readin_add_SNR(res, pulse, SNR, sym, averages=1):
    '''
    read in raw simulation data and calculate DTI metrics with an SNR added to the raw signal. Most of this is just parsing the inputs. 
    The calculation of the metrics is done in calc_diffusion_tensor.
    
    There are a lot of formatting steps currently commented out. Those are for when there are multiple pulse-values that you want to
    collect into a multi-index array. 
    '''
    import pandas as pd
    import numpy as np

    print('Readin in result data')
    # Read in the results 
    results = readin_results(res)
    
    headers     = pd.read_csv(pulse, nrows=0).columns
    fid0     = pd.read_csv(pulse,index_col=False,header = None, skiprows=[0])
    head = list(fid0.columns) 
    head[:len(headers)]= headers
    fid0.columns = head
    fid0 = fid0.sort_index()
    print('All data successfully read in, computing DTI metrics')

    # compute DTI metrics
#     averages = 1
    # This for loop is for when I would compute familes of DTI metrics. But now I just do all of them at once. 
#     for i in range(len(results)):
#         values = calc_diffusion_tensor(results.values,  fid0.values, SNR ,averages, sym)
    values, vectors = calc_diffusion_tensor(results.values,  fid0.values, SNR ,averages, sym)
      
    dMRI_metrics = pd.DataFrame(data = values, index=results.index,columns = ['L1','L2','L3','FA','MD','RD'])
    print('DTI metrics successfully computed.')
    return (dMRI_metrics, results, vectors)

def readin_results(res):
    import pandas as pd
    import numpy as np
    headers     = pd.read_csv(res, nrows=0).columns
    results     = pd.read_csv(res,index_col=False,header = None, skiprows=[0])
    head = list(results.columns) 
    head[:len(headers)]= headers
    results.columns = head
#     results.rename( columns={'Unnamed: 0':'ms_num'}, inplace=True)
    results.rename( columns={' case_num':'case_num'}, inplace=True)
#     results.set_index(['ms_num','pulse_num'],inplace=True)
#     results = results.sort_index()
    return results

def calc_diffusion_tensor(fid1,fid0,SNR,averages, sym):
    '''
    usage example:
    calc_diffusion_tensor(results.loc[[i]].values,  fid0.loc[[i]].values,SNR = np.inf, averages= 1)
    
    Takes two numpy arrays holding the results and the pulse information and computes the apparent diffusion tensor for it. 
    Can handle an array of results and will return an array of the same length with the relevant DTI metrics. 
    This function is adapted from the fanDTasia Matlab toolbox. It is correct, but I have spent no time looking at speed-up and it 
    runs considerable slower than it does in Matlab. 
    
    fid1: the results data
    fid0: the pulse info
    SNR: the desired SNR level to be added to the outputs. For no added noise, set SNR = np.inf
    averages: how many times the average should be taken. Easiest to keep at 1. 
    sym: tells if symmetry was taken advantage to halve the number of simulations.
    '''
    import numpy as np
    import pandas as pd
    import math
    from scipy.optimize import nnls

    num_sim = fid0.shape[0];
    DTI=np.zeros((3,3,num_sim));
    # print(fid0.shape, DTI.shape)
    dMRI = []
    vectors = []
    # display(fid1)
    for num in range(0,len(fid0)):
        i = num
        j0 = 4
        j = 1
        # %deterime how many gradient directions were used
        while fid0[i,j] != -2:      
            j = j + 1; 
        # print('Number of gradient directions:', (j-j0)/3)
        # %#reset grad_all and place the gradient directions into the array
        grad_all = np.zeros((num_sim,j-j0));
        grad_all[i][0:j-j0] = fid0[i][j0:j];

        # %#calculate the number of gradient directions
        num_dir = int((j-j0)/3);
        # GradientOrientations=[]

        # %#reshape gradient directions to nx3 matrix
        GradientOrientations = np.reshape(grad_all[i,:],(3,num_dir)).T;  

        # %# load S0 and S1 data
        try:
            S0 = np.array(fid1[i,27-2]).astype(np.float)
            S =  np.array(fid1[i,27-2+1:27-2+1+num_dir]).astype(np.float)
            if S0 == 0:
                S0 = 2e-100
                S = np.array(np.ones(num_dir)*2e-140)
        except Exception:
            S0 = 2e-100
            S = np.array(np.ones(num_dir)*2e-140)
#         print(S, S0)
               
        if sym:
            # %#optional ability to take advantage of symmetry of REV.  
            GradientOrientations = np.append(GradientOrientations, GradientOrientations*np.array([[  1, -1,  1],
                                                                                                  [  1,  1, -1],
                                                                                                  [ -1,  1,  1]]),axis = 0)
            S = np.append(S,S)
            num_dir = num_dir*2
#         S0 = 1.0
        SS0 = S/S0
#         print(S)
#         print(S0)
#         print()
        #add SNR and take averages, default is SNR = inf and 1 average
#         Sr = np.random.randn(averages,num_dir)/SNR + SS0;
#         Si = np.random.randn(averages,num_dir)/SNR;
#         SS0_list = (Sr**2 + Si**2)**0.5;
        
        Sr = np.random.randn(averages,num_dir)/SNR + S
        Si = np.random.randn(averages,num_dir)/SNR
        Sr0 = np.random.randn(averages,1)/SNR + S0
        Si0 = np.random.randn(averages,1)/SNR
        
        S_list = (Sr**2 + Si**2)**0.5
        S0_list = (Sr0**2 + Si0**2)**0.5
        SS0_list = S_list/S0_list
        
#         if num == 0:
#             print(np.random.randn(averages,num_dir)/SNR) 
#             print(S)
# #             print(Sr) 
#             print(S_list) 
#             print(S0, S0_list)  
#             print(' ')
            
        if averages > 1: 
            SS0 = np.mean(SS0_list,0) 
        else: 
            SS0 = SS0_list



        # %# load b-values and create diagonal matrix
        bval = fid1[i,14-2];  
        b_value = np.ones(num_dir)*bval;
        # print(bval)
        # %% Calculate Tensor

        # %%%%%Monomials%%%%%   function G=constructMatrixOfMonomials(g,order)
        # % This function computes all possible monomials in 3 variables of a certain order. 
        # % The 3 variables are given in the form of 3-dimensional vectors.
        g = GradientOrientations
        order = 2

        G = np.ones((g.shape[0],6))

        for k in range(0,g.shape[0]):
            c=0;
            for i in range(0,order+1):
                for j in range(0,order-i+1):
                    G[k,c]=(g[k,0]**i)*(g[k,1]**j)*(g[k,2]**(order-i-j));
                    c=c+1;

        #%%%%%81Polynomials%%%%%%  function C=constructSetOf321Polynomials(order)
        # % This function computes the coefficients of homogenous polynomials in 3 variables of
        # % a given order, which correspond to squares of lower (half) order polynomials. 
        order = 2
        g0 = np.reshape(UnitVectors(), (int(UnitVectors().shape[0]/3), 3));

        Mprime=81;
        g=g0[0:Mprime,:]

        def populationBasis(i,order,c):
            if order==0:  
                ret=c
            else:
                j=int(np.mod(i,3))
                c[j]=c[j]+1
                ret=populationBasis((i-j)/3,order-1,c);

            return ret

        def population(i,j,k,order):
            size=3**order;
            counter=0;
            for z in range(0,size):
                c=populationBasis(z,order,[0, 0, 0]);
                if (c[0]==i) and (c[1]==j) and (c[2]==k):
                    counter=counter+1;
            return counter

        pop = np.zeros((order+1,order+1,order+1))

        for i in range(0,order+1):
            for j in range(0,order-i+1):
                pop[i,j,order-i-j]=population(i,j,order-i-j,order);

        C = np.zeros((len(g), 6) )
        for k in range(0,len(g)):
            c=0;
            for i in range(0,order+1):
                for j in range(0,order-i+1):
                    C[k,c]=pop[i,j,order-i-j]*(g[k,0]**i)*(g[k,1]**j)*(g[k,2]**(order-i-j));
                    c=c+1;

        C = C.T

        P=np.matmul(G,C);
        P=-np.matmul(np.diag(b_value),P)

        SS0_sq = np.array(np.squeeze(SS0)).astype(float)

        y=np.log(SS0_sq)
        try:
            (x, rnorm) =nnls(P, y.T)
        except:
            print(num)
            print(P)
            print(y)
            print(S)
            print(SS0)
            print(S_list)
            print(S0_list)
            (x, rnorm) =nnls(P, y.T)
            
        T = np.matmul(C, x);
        # # %Save DTI components
        DTI=[[T[5],   T[4]/2, T[3]/2], 
                    [T[4]/2, T[2],   T[1]/2],
                    [T[3]/2, T[1]/2, T[0]  ]]

        mean_diffusivity=np.trace(DTI)/3;
        (l, eigenvectors)=np.linalg.eig(DTI);

        idx = l.argsort()   
        l = l[idx]
        eigenvectors = eigenvectors[:,idx]

        l1=l[2];
        l2=l[1];
        l3=l[0];
        v1=eigenvectors[0:3,2];
        v2=eigenvectors[0:3,1];
        v3=eigenvectors[0:3,0];

        MD = (l1+l2+l3)/3
        RD = (l2+l3)/2
        try:
            FA=math.sqrt(1.5)*math.sqrt((l1-MD)**2+(l2-MD)**2+(l3-MD)**2) / math.sqrt(l1**2+l2**2+l3**2)
        except Exception:
            FA = 0
#         if FA < 0.001 or FA > 0.9:
#             FA = np.nan
#             MD = np.nan
#             RD = np.nan
#             l1= np.nan
#             l2= np.nan
#             l3= np.nan
#             print('set to nan')
        dMRI.append([l1,l2,l3, FA, MD, RD])
        vectors.append([[v1],[v2],[v3]])

    return dMRI, vectors



def UnitVectors():
    import numpy as np
    g=np.fromstring(str("""0.00000000 0.52573109 0.85065079
                        0.00000000 -0.52573109 0.85065079
                        0.52573109 0.85065079 0.00000000
                        -0.52573109 0.85065079 0.00000000
                        0.85065079 0.00000000 0.52573109
                        0.85065079 0.00000000 -0.52573109
                        0.00000000 0.00000000 1.00000000
                        0.50000000 -0.30901700 0.80901700
                        0.50000000 0.30901700 0.80901700
                        -0.50000000 -0.30901700 0.80901700
                        -0.50000000 0.30901700 0.80901700
                        0.30901700 0.80901700 0.50000000
                        0.00000000 1.00000000 0.00000000
                        -0.30901700 0.80901700 0.50000000
                        0.80901700 0.50000000 0.30901700
                        -0.80901700 0.50000000 0.30901700
                        -0.30901700 -0.80901700 0.50000000
                        0.30901700 -0.80901700 0.50000000
                        -0.80901700 -0.50000000 0.30901700
                        0.80901700 -0.50000000 0.30901700
                        1.00000000 0.00000000 0.00000000
                        0.00000000 0.27326652 0.96193838
                        0.00000000 -0.27326652 0.96193838
                        0.25989190 -0.43388855 0.86266845
                        0.70204645 -0.16062205 0.69378048
                        0.25989190 0.43388855 0.86266845
                        0.70204645 0.16062205 0.69378048
                        -0.25989190 -0.43388855 0.86266845
                        -0.70204645 -0.16062205 0.69378048
                        -0.25989190 0.43388855 0.86266845
                        -0.70204645 0.16062205 0.69378048
                        0.16062205 0.69378048 0.70204645
                        0.43388855 0.86266845 0.25989190
                        0.27326652 0.96193838 0.00000000
                        -0.27326652 0.96193838 0.00000000
                        -0.16062205 0.69378048 0.70204645
                        -0.43388855 0.86266845 0.25989190
                        0.69378048 0.70204645 0.16062205
                        0.86266845 0.25989190 0.43388855
                        -0.69378048 0.70204645 0.16062205
                        -0.86266845 0.25989190 0.43388855
                        -0.16062205 -0.69378048 0.70204645
                        -0.43388855 -0.86266845 0.25989190
                        0.16062205 -0.69378048 0.70204645
                        0.43388855 -0.86266845 0.25989190
                        -0.69378048 -0.70204645 0.16062205
                        -0.86266845 -0.25989190 0.43388855
                        0.69378048 -0.70204645 0.16062205
                        0.86266845 -0.25989190 0.43388855
                        0.96193838 0.00000000 0.27326652
                        0.96193838 0.00000000 -0.27326652
                        0.26286557 -0.16245985 0.95105654
                        0.52573109 0.00000000 0.85065079
                        0.26286557 0.16245985 0.95105654
                        -0.26286557 -0.16245985 0.95105654
                        -0.52573109 0.00000000 0.85065079
                        -0.26286557 0.16245985 0.95105654
                        0.16245985 0.95105654 0.26286557
                        -0.16245985 0.95105654 0.26286557
                        0.00000000 0.85065079 0.52573109
                        0.58778524 0.68819094 0.42532539
                        0.68819094 0.42532539 0.58778524
                        0.42532539 0.58778524 0.68819094
                        -0.58778524 0.68819094 0.42532539
                        -0.68819094 0.42532539 0.58778524
                        -0.42532539 0.58778524 0.68819094
                        -0.16245985 -0.95105654 0.26286557
                        0.16245985 -0.95105654 0.26286557
                        0.00000000 -0.85065079 0.52573109
                        -0.58778524 -0.68819094 0.42532539
                        -0.68819094 -0.42532539 0.58778524
                        -0.42532539 -0.58778524 0.68819094
                        0.58778524 -0.68819094 0.42532539
                        0.68819094 -0.42532539 0.58778524
                        0.42532539 -0.58778524 0.68819094
                        0.95105654 0.26286557 0.16245985
                        0.95105654 0.26286557 -0.16245985
                        0.85065079 0.52573109 0.00000000
                        -0.95105654 0.26286557 -0.16245985
                        -0.95105654 0.26286557 0.16245985
                        -0.85065079 0.52573109 0.00000000
                        0.00000000 0.40335536 0.91504341
                        0.00000000 0.13795224 0.99043888
                        0.00000000 -0.40335536 0.91504341
                        0.00000000 -0.13795224 0.99043888
                        0.13120037 -0.48444164 0.86492932
                        0.38361374 -0.37503856 0.84391147
                        0.78384304 -0.08108629 0.61564201
                        0.60682517 -0.23708633 0.75865233
                        0.13120037 0.48444164 0.86492932
                        0.38361374 0.37503856 0.84391147
                        0.78384304 0.08108629 0.61564201
                        0.60682517 0.23708633 0.75865233
                        -0.13120037 -0.48444164 0.86492932
                        -0.38361374 -0.37503856 0.84391147
                        -0.78384304 -0.08108629 0.61564201
                        -0.60682517 -0.23708633 0.75865233
                        -0.13120037 0.48444164 0.86492932
                        -0.38361374 0.37503856 0.84391147
                        -0.78384304 0.08108629 0.61564201
                        -0.60682517 0.23708633 0.75865233
                        0.08108629 0.61564201 0.78384304
                        0.23708633 0.75865233 0.60682517
                        0.48444164 0.86492932 0.13120037
                        0.37503856 0.84391147 0.38361374
                        0.40335536 0.91504341 0.00000000
                        0.13795224 0.99043888 0.00000000
                        -0.40335536 0.91504341 0.00000000
                        -0.13795224 0.99043888 0.00000000
                        -0.08108629 0.61564201 0.78384304
                        -0.23708633 0.75865233 0.60682517
                        -0.48444164 0.86492932 0.13120037
                        -0.37503856 0.84391147 0.38361374
                        0.61564201 0.78384304 0.08108629
                        0.75865233 0.60682517 0.23708633
                        0.86492932 0.13120037 0.48444164
                        0.84391147 0.38361374 0.37503856
                        -0.61564201 0.78384304 0.08108629
                        -0.75865233 0.60682517 0.23708633
                        -0.86492932 0.13120037 0.48444164
                        -0.84391147 0.38361374 0.37503856
                        -0.08108629 -0.61564201 0.78384304
                        -0.23708633 -0.75865233 0.60682517
                        -0.48444164 -0.86492932 0.13120037
                        -0.37503856 -0.84391147 0.38361374
                        0.08108629 -0.61564201 0.78384304
                        0.23708633 -0.75865233 0.60682517
                        0.48444164 -0.86492932 0.13120037
                        0.37503856 -0.84391147 0.38361374
                        -0.61564201 -0.78384304 0.08108629
                        -0.75865233 -0.60682517 0.23708633
                        -0.86492932 -0.13120037 0.48444164
                        -0.84391147 -0.38361374 0.37503856
                        0.61564201 -0.78384304 0.08108629
                        0.75865233 -0.60682517 0.23708633
                        0.86492932 -0.13120037 0.48444164
                        0.84391147 -0.38361374 0.37503856
                        0.91504341 0.00000000 0.40335536
                        0.99043888 0.00000000 0.13795224
                        0.91504341 0.00000000 -0.40335536
                        0.99043888 0.00000000 -0.13795224
                        0.13307109 -0.08224247 0.98768836
                        0.38618740 -0.23867694 0.89100653
                        0.51925850 -0.15643448 0.84017789
                        0.51925850 0.15643448 0.84017789
                        0.13307109 0.08224247 0.98768836
                        0.38618740 0.23867694 0.89100653
                        -0.13307109 -0.08224247 0.98768836
                        -0.38618740 -0.23867694 0.89100653
                        -0.51925850 -0.15643448 0.84017789
                        -0.51925850 0.15643448 0.84017789
                        -0.13307109 0.08224247 0.98768836
                        -0.38618740 0.23867694 0.89100653
                        0.23867694 0.89100653 0.38618740
                        0.08224247 0.98768836 0.13307109
                        -0.08224247 0.98768836 0.13307109
                        -0.23867694 0.89100653 0.38618740
                        0.15643448 0.84017789 0.51925850
                        -0.15643448 0.84017789 0.51925850
                        0.45399049 0.75793540 0.46842986
                        0.70710677 0.60150099 0.37174803
                        0.75793540 0.46842986 0.45399049
                        0.60150099 0.37174803 0.70710677
                        0.37174803 0.70710677 0.60150099
                        0.46842986 0.45399049 0.75793540
                        -0.45399049 0.75793540 0.46842986
                        -0.70710677 0.60150099 0.37174803
                        -0.75793540 0.46842986 0.45399049
                        -0.60150099 0.37174803 0.70710677
                        -0.37174803 0.70710677 0.60150099
                        -0.46842986 0.45399049 0.75793540
                        -0.23867694 -0.89100653 0.38618740
                        -0.08224247 -0.98768836 0.13307109
                        0.08224247 -0.98768836 0.13307109
                        0.23867694 -0.89100653 0.38618740
                        -0.15643448 -0.84017789 0.51925850
                        0.15643448 -0.84017789 0.51925850
                        -0.45399049 -0.75793540 0.46842986
                        -0.70710677 -0.60150099 0.37174803
                        -0.75793540 -0.46842986 0.45399049
                        -0.60150099 -0.37174803 0.70710677
                        -0.37174803 -0.70710677 0.60150099
                        -0.46842986 -0.45399049 0.75793540
                        0.45399049 -0.75793540 0.46842986
                        0.70710677 -0.60150099 0.37174803
                        0.75793540 -0.46842986 0.45399049
                        0.60150099 -0.37174803 0.70710677
                        0.37174803 -0.70710677 0.60150099
                        0.46842986 -0.45399049 0.75793540
                        0.89100653 0.38618740 0.23867694
                        0.98768836 0.13307109 0.08224247
                        0.98768836 0.13307109 -0.08224247
                        0.89100653 0.38618740 -0.23867694
                        0.84017789 0.51925850 0.15643448
                        0.84017789 0.51925850 -0.15643448
                        -0.89100653 0.38618740 -0.23867694
                        -0.98768836 0.13307109 -0.08224247
                        -0.98768836 0.13307109 0.08224247
                        -0.89100653 0.38618740 0.23867694
                        -0.84017789 0.51925850 -0.15643448
                        -0.84017789 0.51925850 0.15643448
                        0.13165537 -0.35822880 0.92430460
                        0.26408276 -0.30125889 0.91624421
                        0.13279247 -0.22011703 0.96639258
                        0.71128172 0.00000000 0.70290703
                        0.62023956 0.08114185 0.78020436
                        0.62023956 -0.08114185 0.78020436
                        0.13165537 0.35822880 0.92430460
                        0.26408276 0.30125889 0.91624421
                        0.13279247 0.22011703 0.96639258
                        0.39960706 -0.08232358 0.91298246
                        0.39960706 0.08232358 0.91298246
                        0.26640469 0.00000000 0.96386129
                        -0.13165537 -0.35822880 0.92430460
                        -0.26408276 -0.30125889 0.91624421
                        -0.13279247 -0.22011703 0.96639258
                        -0.71128172 0.00000000 0.70290703
                        -0.62023956 0.08114185 0.78020436
                        -0.62023956 -0.08114185 0.78020436
                        -0.13165537 0.35822880 0.92430460
                        -0.26408276 0.30125889 0.91624421
                        -0.13279247 0.22011703 0.96639258
                        -0.39960706 -0.08232358 0.91298246
                        -0.39960706 0.08232358 0.91298246
                        -0.26640469 0.00000000 0.96386129
                        0.35822880 0.92430460 0.13165537
                        0.22011703 0.96639258 0.13279247
                        0.30125889 0.91624421 0.26408276
                        -0.35822880 0.92430460 0.13165537
                        -0.30125889 0.91624421 0.26408276
                        -0.22011703 0.96639258 0.13279247
                        0.00000000 0.70290703 0.71128172
                        -0.08114185 0.78020436 0.62023956
                        0.08114185 0.78020436 0.62023956
                        0.00000000 0.96386129 0.26640469
                        -0.08232358 0.91298246 0.39960706
                        0.08232358 0.91298246 0.39960706
                        0.57125163 0.79264921 0.21302287
                        0.64741188 0.70230985 0.29600459
                        0.51612163 0.78345168 0.34615302
                        0.79264921 0.21302287 0.57125163
                        0.70230985 0.29600459 0.64741188
                        0.78345168 0.34615302 0.51612163
                        0.21302287 0.57125163 0.79264921
                        0.34615302 0.51612163 0.78345168
                        0.29600459 0.64741188 0.70230985
                        0.64657778 0.56425422 0.51337546
                        0.56425422 0.51337546 0.64657778
                        0.51337546 0.64657778 0.56425422
                        -0.57125163 0.79264921 0.21302287
                        -0.64741188 0.70230985 0.29600459
                        -0.51612163 0.78345168 0.34615302
                        -0.79264921 0.21302287 0.57125163
                        -0.70230985 0.29600459 0.64741188
                        -0.78345168 0.34615302 0.51612163
                        -0.21302287 0.57125163 0.79264921
                        -0.34615302 0.51612163 0.78345168
                        -0.29600459 0.64741188 0.70230985
                        -0.64657778 0.56425422 0.51337546
                        -0.56425422 0.51337546 0.64657778
                        -0.51337546 0.64657778 0.56425422
                        -0.35822880 -0.92430460 0.13165537
                        -0.22011703 -0.96639258 0.13279247
                        -0.30125889 -0.91624421 0.26408276
                        0.35822880 -0.92430460 0.13165537
                        0.30125889 -0.91624421 0.26408276
                        0.22011703 -0.96639258 0.13279247
                        0.00000000 -0.70290703 0.71128172
                        0.08114185 -0.78020436 0.62023956
                        -0.08114185 -0.78020436 0.62023956
                        0.00000000 -0.96386129 0.26640469
                        0.08232358 -0.91298246 0.39960706
                        -0.08232358 -0.91298246 0.39960706
                        -0.57125163 -0.79264921 0.21302287
                        -0.64741188 -0.70230985 0.29600459
                        -0.51612163 -0.78345168 0.34615302
                        -0.79264921 -0.21302287 0.57125163
                        -0.70230985 -0.29600459 0.64741188
                        -0.78345168 -0.34615302 0.51612163
                        -0.21302287 -0.57125163 0.79264921
                        -0.34615302 -0.51612163 0.78345168
                        -0.29600459 -0.64741188 0.70230985
                        -0.64657778 -0.56425422 0.51337546
                        -0.56425422 -0.51337546 0.64657778
                        -0.51337546 -0.64657778 0.56425422
                        0.57125163 -0.79264921 0.21302287
                        0.64741188 -0.70230985 0.29600459
                        0.51612163 -0.78345168 0.34615302
                        0.79264921 -0.21302287 0.57125163
                        0.70230985 -0.29600459 0.64741188
                        0.78345168 -0.34615302 0.51612163
                        0.21302287 -0.57125163 0.79264921
                        0.34615302 -0.51612163 0.78345168
                        0.29600459 -0.64741188 0.70230985
                        0.64657778 -0.56425422 0.51337546
                        0.56425422 -0.51337546 0.64657778
                        0.51337546 -0.64657778 0.56425422
                        0.92430460 0.13165537 0.35822880
                        0.96639258 0.13279247 0.22011703
                        0.91624421 0.26408276 0.30125889
                        0.92430460 0.13165537 -0.35822880
                        0.91624421 0.26408276 -0.30125889
                        0.96639258 0.13279247 -0.22011703
                        0.70290703 0.71128172 0.00000000
                        0.78020436 0.62023956 -0.08114185
                        0.78020436 0.62023956 0.08114185
                        0.96386129 0.26640469 0.00000000
                        0.91298246 0.39960706 -0.08232358
                        0.91298246 0.39960706 0.08232358
                        -0.92430460 0.13165537 -0.35822880
                        -0.96639258 0.13279247 -0.22011703
                        -0.91624421 0.26408276 -0.30125889
                        -0.92430460 0.13165537 0.35822880
                        -0.91624421 0.26408276 0.30125889
                        -0.96639258 0.13279247 0.22011703
                        -0.70290703 0.71128172 0.00000000
                        -0.78020436 0.62023956 0.08114185
                        -0.78020436 0.62023956 -0.08114185
                        -0.96386129 0.26640469 0.00000000
                        -0.91298246 0.39960706 0.08232358
                        -0.91298246 0.39960706 -0.08232358""").replace("\n", ""),sep=' ')

    return g
